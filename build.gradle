// We use the Java builder and the download plug-in we just fetched.
apply plugin: "java"
apply plugin: "eclipse"

// For the dependencies of our project (not of this build script itself), we also need the
// local Maven cache. We use it to get the MATSim snapshot.
repositories {
    mavenLocal()
    maven {
        url 'http://dl.bintray.com/matsim/matsim'
    }
    maven {
        url 'http://oss.jfrog.org/artifactory/libs-snapshot'
    }
    maven {
        url 'http://josm.openstreetmap.de/nexus/content/repositories/public'
    }
    mavenCentral()
}

// Declare a configuration for our external dependency (MATSim) so we can later take its classes and zip them into our jar.
configurations {
    zipIntoJar
}

dependencies {
    zipIntoJar 'org.matsim:matsim:0.8.0-SNAPSHOT'
    // Compile is the distinguished configuration of the Java plug-in which actually needs to contain
    // the dependency.
    // We use zipIntoJar as a middleman, so that it has a name and we can later address its classes.
    // We add it to compile, so that it becomes a dependency of our project.
    compile (configurations.zipIntoJar.dependencies) {
   		exclude group: 'org.geotools'
        exclude group: 'kml'
        exclude group: 'org.jfree'
    }
    // We also include the JOSM jar, which will be downloaded below. But it will not go into the jar.
    // Should rather be 'provided', see https://issues.gradle.org/browse/GRADLE-784
    compile 'org.openstreetmap.josm:josm:SNAPSHOT'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// I (michaz) seem to need this when debugging from IntelliJ.
// With the default setting (build/resources/main),
// resources are not found on the classpath.
sourceSets {
    main {
        output.resourcesDir = "build/classes/main"
    }
}

jar.baseName = "matsim"
jar {
    metaInf {
        from("resources") {
            include "mime.types"
        }
    }
    // Put in the manifest entries which are required for a JOSM plug-in.
    manifest {
        attributes(
                "Plugin-Date": new Date().format("yyyy-MM-dd HH:mm"),
                "Plugin-Version": "v0.5.1",
                "Plugin-Mainversion": 8882,
                "Created-By": System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                "Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                "Author" : "Nico Kuehnel",
                "Plugin-Class" : "org.matsim.contrib.josm.MATSimPlugin",
                "Plugin-Description": "Allows to edit and extract network information for the traffic simulation MATSim",
                "Plugin-Icon" : "images/dialogs/matsim-scenario.png",
                "Plugin-Link" : "http://www.matsim.org"
        )
    }
    // Now take the dependencies of zipIntoJar (currently only MATSim), and put them into
    // our target jar.
    from {
        configurations.zipIntoJar.collect { zipTree(it) }
    }
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

// Install the plug-in into the local JOSM plug-in directory.
// You can start JOSM from your IDE and debug the plug-in, but the JOSM
// plug-in system still expects the plug-in jar in its correct place.
import org.apache.tools.ant.taskdefs.condition.Os
task installLocalJosm {
    doLast {
        def josmPluginDir;
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def appDataDir = System.getenv("APPDATA")
            josmPluginDir = appDataDir + "/JOSM/plugins"
        } else {
            def homePath = System.properties['user.home']
            josmPluginDir = homePath + "/Library/JOSM/plugins"
        }
        ant.copy(todir: josmPluginDir) {
            fileset(dir: "build/libs") {
                include(name: "matsim.jar")
            }
        }
    }
}
installLocalJosm.dependsOn "jar"

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

